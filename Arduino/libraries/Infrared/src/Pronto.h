/**
 * Static class consisting of functions for parsing a Pronto Hex string (like 0000 006C 0022 0002 015B 00AD ...)  into an IrSignal,
 * and vice versa.
 * <a href="http://harctoolbox.org/Glossary.html#ProntoSemantics">Reference</a>.
 */

#pragma once

#include "InfraredTypes.h"
#include "IrSignal.h"

class Pronto {
private:
    typedef uint16_t prontoInt;

    static const prontoInt learnedToken = 0x0000;
    static const prontoInt learnedNonModulatedToken = 0x0100;
    static const unsigned int bitsInHexadecimal = 4;
    static const unsigned int digitsInProntoNumber = 4;
    static const unsigned int numbersInPreamble = 4;
    static const unsigned int hexMask = 0xF;
    static const unsigned int charsInPreamble = numbersInPreamble * (digitsInProntoNumber + 1);
    static constexpr double prontoFreqConst = 0.241246;
    static const uint32_t prontoConst = (uint32_t) (1E6 / prontoFreqConst); // 4145146
    static const prontoInt fallbackFrequencyCode = 0x0040; // To use with frequency = 0;
    static const frequency_t fallbackFrequency = 64767; // To use with frequency = 0;

    Pronto() {};

    static IrSequence *mkSequence(const uint16_t *data, size_t pairs, double timebase);

    static frequency_t toFrequency(prontoInt code);

    static prontoInt toFrequencyCode(frequency_t frequency);

    static size_t lengthHexString(size_t introLength, size_t repeatLength);

    static char* setup(frequency_t frequency, size_t introLength, size_t repeatLength);

    static char hexDigit(unsigned int x);

    static unsigned int appendChar(char *result, unsigned int index, char ch);

    static unsigned int appendDuration(char *result, unsigned int index, microseconds_t duration, frequency_t frequency);

    static unsigned int appendDigit(char *result, unsigned int index, unsigned int number);

    static unsigned int appendNumber(char *result, unsigned int index, prontoInt number);

    static unsigned int appendSequence(char *result, unsigned int index, const microseconds_t *data, size_t length, frequency_t frequency);

    static unsigned int appendSequence(char *result, unsigned int index, const IrSequence& irSequence, frequency_t frequency);

public:
    /**
     * Function for parsing its input data into an IrSignal. The ending sequence will always be empty.
     * @param data Numerical data, the number in the Pronto form.
     * @param size Number of data points.
     * @return IrSignal
     */
    static IrSignal *parse(const uint16_t *data, size_t size);

    /**
     * Function for parsing its input data into an IrSignal. The ending sequence will always be empty.
     * @param str Text string containing a Pronto form signal.
     * @return IrSignal
     */
    static IrSignal *parse(const char *str);

#ifdef ARDUINO
   /**
     * Function for parsing its input data into an IrSignal. The ending sequence will always be empty.
     * @param str Text string containing a Pronto form signal.
     * This form handles the F(...) form.
     * @return IrSignal
     */
    static IrSignal *parse(const __FlashStringHelper *str);
#endif

    /**
     * Function for generating a Pronto Hex string from the argument.
     * @param irSignal
     * @return Zero terminated string. Has been generated by new[], and must be manually delete[]-d by the user.
     */
    static char* toProntoHex(const IrSignal& irSignal);

    /**
     * Function for generating a Pronto Hex string from the argument.
     * @param data
     * @param length
     * @param frequency
     * @return Zero terminated string. Has been generated by new[], and must be manually delete[]-d by the user.
     */
    static char* toProntoHex(const microseconds_t* data, size_t length, frequency_t frequency = IrSignal::defaultFrequency);

    /**
     * Function for generating a Pronto Hex string from the argument.
     * @param irSequence
     * @param frequency
     * @return Zero terminated string. Has been generated by new[], and must be manually delete[]-d by the user.
     */
    static char* toProntoHex(const IrSequence& irSequence, frequency_t frequency = IrSignal::defaultFrequency);
};
